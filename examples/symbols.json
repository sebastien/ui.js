[{"name": "ui.api", "lang": "js", "children": [{"name": "ui.api.API", "type": "global", "description": "an object containing various utility functions and values for building web applications and APIs."}]}, {"name": "ui.binding", "lang": "js", "children": [{"name": "ui.binding.URLHash", "type": "import", "description": "a class imported from \"./url.js\" for working with URL hash values"}, {"name": "ui.binding.onError", "type": "import", "description": "a function imported from \"./utils.js\" for handling errors"}, {"name": "ui.binding.parseRoute", "type": "function", "description": "a function to parse a route text and extract scheme and path information"}, {"name": "ui.binding.Binding", "type": "class", "description": "a base class for defining bindings"}, {"name": "ui.binding.URLHashBinding", "type": "class", "description": "a subclass of Binding for working with URL hash values"}, {"name": "ui.binding.StateBinding", "type": "class", "description": "a subclass of Binding for working with state values"}, {"name": "ui.binding.Bindings", "type": "global", "description": "an empty object to store bindings"}, {"name": "ui.binding.bind", "type": "function", "description": "a function to bind routes to corresponding bindings"}, {"name": "ui.binding.parseRoute", "type": "function", "description": "a function to parse a route text and extract scheme and path information"}, {"name": "ui.binding.Binding", "type": "class", "description": "a base class for defining bindings"}, {"name": "ui.binding.URLHashBinding", "type": "class", "description": "a subclass of Binding for working with URL hash values"}, {"name": "ui.binding.StateBinding", "type": "class", "description": "a subclass of Binding for working with state values"}, {"name": "ui.binding.Bindings", "type": "global", "description": "an empty object to store bindings"}, {"name": "ui.binding.bind", "type": "function", "description": "a function to bind routes to corresponding bindings"}]}, {"name": "ui.color", "lang": "js", "children": [{"name": "ui.color.RE_COLOR", "type": "constant", "description": "a regular expression pattern to match hex color codes."}, {"name": "ui.color.Color", "type": "class", "description": "represents a color object with methods to manipulate and convert color values."}, {"name": "ui.color.rgb", "type": "function", "description": "converts RGB values to a color array."}, {"name": "ui.color.hex", "type": "function", "description": "converts a color value to a hexadecimal string."}, {"name": "ui.color.gamma", "type": "function", "description": "applies gamma correction to a color value."}, {"name": "ui.color.degamma", "type": "function", "description": "reverses gamma correction on a color value."}, {"name": "ui.color.color", "type": "function", "description": "ensures the input value is a valid Color object."}]}, {"name": "ui.components", "lang": "js", "children": [{"name": "ui.components.Component", "type": "class", "description": "encapsulates an anchor node, a template effector, and state context."}, {"name": "ui.components.createComponent", "type": "function", "description": "takes a DOM node with a `data-ui` attribute, finds the corresponding template in `Templates`, and creates a new `Component` replacing the given node and then rendering the component."}]}, {"name": "ui.controllers", "lang": "js", "children": [{"name": "ui.controllers.Use", "type": "class", "description": "a factory object that creates cells."}, {"name": "ui.controllers.Controllers", "type": "global", "description": "a Map object to store controllers"}, {"name": "ui.controllers.EventProxy", "type": "class", "description": "a proxy for handling events"}, {"name": "ui.controllers.StateProxy", "type": "class", "description": "a proxy for managing state"}, {"name": "ui.controllers.Controller", "type": "class", "description": "represents a controller with events and cells"}, {"name": "ui.controllers.createController", "type": "global", "description": "a function to create an instance of a controller"}, {"name": "ui.controllers.controller", "type": "global", "description": "a function to register a controller"}]}, {"name": "ui.css", "lang": "js", "children": [{"name": "ui.css.CSS_UNITS", "type": "global", "description": "an object containing various CSS unit types"}, {"name": "ui.css.RE_PROPERTY", "type": "global", "description": "a regular expression to match CSS property names"}, {"name": "ui.css.propertyName", "type": "function", "description": "a function to normalize a name to a CSS property name"}, {"name": "ui.css.unpropertyName", "type": "function", "description": "a function to convert a `kebab-case` name to `camelCase`"}, {"name": "ui.css.RE_PROPERY_TEMPLATE", "type": "global", "description": "a regular expression to match property templates"}, {"name": "ui.css.expandProperty", "type": "function", "description": "a function to expand a property value with expressions"}, {"name": "ui.css.rules", "type": "function", "description": "a function to process and expand CSS rules"}, {"name": "ui.css.css", "type": "function", "description": "a function to generate CSS rules"}, {"name": "ui.css.stylesheet", "type": "function", "description": "a function to create a stylesheet element in the document"}, {"name": "ui.css.unit", "type": "function", "description": "a function to format a value with a CSS unit"}]}, {"name": "ui.diff", "lang": "js", "children": [{"name": "ui.diff.onArrayChange", "type": "function", "description": "Compares two arrays and calls specific callback functions for add, remove, and change operations."}, {"name": "ui.diff.onObjectChange", "type": "function", "description": "Compares two objects and calls a callback function for any changes."}, {"name": "ui.diff.onValueChange", "type": "function", "description": "Compares two values and calls a callback function for any changes."}, {"name": "ui.diff.changes", "type": "function", "description": "Compares two values and delegates the comparison to `onValueChange`."}]}, {"name": "ui.effectors.attribute", "lang": "js", "children": [{"name": "ui.effectors.attribute.AttributeEffector", "type": "class", "description": "extends `Effector`, represents an effector for handling attributes on HTML elements."}, {"name": "ui.effectors.attribute.AttributeEffect", "type": "class", "description": "extends `Effect`, represents the effect of applying attributes on HTML elements."}]}, {"name": "ui.effectors.content", "lang": "js", "children": [{"name": "ui.effectors.content.ContentEffector", "type": "class", "description": "Extends `Effector` class to define an effector for handling content in the UI."}, {"name": "ui.effectors.content.ContentEffect", "type": "class", "description": "Extends `Effect` class to define the specific effect for content handling."}]}, {"name": "ui.effectors.event", "lang": "js", "children": [{"name": "ui.effectors.event.EventEffector", "type": "class", "description": "Extends `Effector`. Represents an effector triggered by a specific event, with the ability to handle the event and update the scope accordingly."}, {"name": "ui.effectors.event.EventEffect", "type": "class", "description": "Extends `Effect`. Represents the effect of an event, including handling the event, updating scope, triggering events, and unifying values."}]}, {"name": "ui.effectors.if", "lang": "js", "children": [{"name": "ui.effectors.if.IfEffector", "type": "class", "description": "A type of Effector that handles conditional rendering based on a template."}, {"name": "ui.effectors.if.IfEffect", "type": "class", "description": "Represents the effect of a conditional rendering."}]}, {"name": "ui.effectors", "lang": "js", "children": [{"name": "ui.effectors.EffectScope", "type": "class", "description": "Represents the scope of an effector, including its data source and event handlers."}, {"name": "ui.effectors.Effect", "type": "class", "description": "Base class for an effect that manipulates data based on a selector."}, {"name": "ui.effectors.Effector", "type": "class", "description": "Represents an effector that targets a specific node and selects data using a selector."}]}, {"name": "ui.effectors.match", "lang": "js", "children": [{"name": "ui.effectors.match.MatchEffector", "type": "class", "description": "Extends `Effector`. Represents an effector that matches a value to one of its branches."}, {"name": "ui.effectors.match.MatchEffect", "type": "class", "description": "Extends `Effect`. Represents the effect of matching a value to one of the effector's branches."}]}, {"name": "ui.effectors.slot", "lang": "js", "children": [{"name": "ui.effectors.slot.SlotEffector", "type": "class", "description": "A type of Effector that detects add, remove, and relay operations for slots in a UI."}, {"name": "ui.effectors.slot.DynamicTemplateEffect", "type": "class", "description": "A type of Effect that wraps another effect and changes the template dynamically."}, {"name": "ui.effectors.slot.SlotEffect", "type": "class", "description": "An abstract class representing the generic version of a slot effect, specialized by `SingleSlotEffect` and `MappingSlotEffect`."}, {"name": "ui.effectors.slot.SingleSlotEffect", "type": "class", "description": "A type of SlotEffect representing a single slot effect."}, {"name": "ui.effectors.slot.MappingSlotEffect", "type": "class", "description": "A type of SlotEffect implementing the mapping of a slot for each item of a collection."}]}, {"name": "ui.effectors.style", "lang": "js", "children": [{"name": "ui.effectors.style.StyleEffector", "type": "class", "description": "Extends `AttributeEffector` and represents an effector for handling style related attributes."}, {"name": "ui.effectors.style.StyleEffect", "type": "class", "description": "Extends `Effect` and represents the effect of applying a style to a node."}]}, {"name": "ui.effectors.template", "lang": "js", "children": [{"name": "ui.effectors.template.TemplateEffector", "type": "class", "description": "Represents an effector used to apply templates with bindings to DOM nodes."}, {"name": "ui.effectors.template.TemplateEffect", "type": "class", "description": "Extends Effect and manages the state of template effectors."}, {"name": "ui.effectors.template.Options", "type": "class", "description": "Represents options for the UI toolkit."}, {"name": "ui.effectors.template.onError", "type": "function", "description": "Handles error logging and reporting."}, {"name": "ui.effectors.template.onWarning", "type": "function", "description": "Handles warning logging and reporting."}, {"name": "ui.effectors.template.len", "type": "function", "description": "Calculates the length of a collection."}, {"name": "ui.effectors.template.assign", "type": "function", "description": "Copies the values of all enumerable properties from one or more source objects to a target object."}, {"name": "ui.effectors.template.reduce", "type": "function", "description": "Reduces a collection to a single value."}, {"name": "ui.effectors.template.Value", "type": "class", "description": "Represents a value in a reactive system."}, {"name": "ui.effectors.template.Selected", "type": "class", "description": "Represents a selected value in a reactive system."}, {"name": "ui.effectors.template.Signal", "type": "class", "description": "Represents a signal in a reactive system."}, {"name": "ui.effectors.template.Effect", "type": "class", "description": "Base class for effects in the UI toolkit."}, {"name": "ui.effectors.template.Effector", "type": "class", "description": "Base class for effectors in the UI toolkit."}, {"name": "ui.effectors.template.Selector", "type": "class", "description": "Represents a selector in the UI toolkit."}, {"name": "ui.effectors.template.Reactor", "type": "class", "description": "Represents a reactor in the UI toolkit."}, {"name": "ui.effectors.template.Fused", "type": "class", "description": "Represents a fused value in the UI toolkit."}, {"name": "ui.effectors.template.pathNode", "type": "function", "description": "Retrieves a node based on a given path."}, {"name": "ui.effectors.template.DOM", "type": "class", "description": "Provides utility functions for DOM manipulation."}, {"name": "ui.effectors.template.makeKey", "type": "function", "description": "Generates a key for an element."}, {"name": "ui.effectors.template.Controllers", "type": "class", "description": "Represents controllers for managing UI interactions."}, {"name": "ui.effectors.template.createController", "type": "function", "description": "Creates a new controller instance."}]}, {"name": "ui.effectors.value", "lang": "js", "children": [{"name": "ui.effectors.value.ValueEffect", "type": "class", "description": "a subclass of Effect that updates a node's attribute value."}, {"name": "ui.effectors.value.ValueEffector", "type": "class", "description": "a subclass of AttributeEffector that applies a ValueEffect to a node."}]}, {"name": "ui.effectors.view", "lang": "js", "children": [{"name": "ui.effectors.view.ViewEffector", "type": "class", "description": "Extends `Effector`. Represents an effector for handling views."}, {"name": "ui.effectors.view.ViewEffect", "type": "class", "description": "Extends `Effect`. Represents the effect of a view."}]}, {"name": "ui.faster.cells", "lang": "js", "children": [{"name": "ui.faster.cells.Context", "type": "global", "description": "an empty object used as a namespace"}, {"name": "ui.faster.cells.FIELD_SEP", "type": "global constant", "description": "a string representing a field separator character"}, {"name": "ui.faster.cells.Cell", "type": "class", "description": "represents a cell in the UI with various properties and methods"}]}, {"name": "ui.faster.client", "lang": "js", "children": [{"name": "ui.faster.client.globals", "type": "global", "description": "an object containing the global context and an instance of `DOMEffector`"}, {"name": "ui.faster.client.render", "type": "function", "description": "a function that renders a component with data onto a parent element using a template, context, and effector"}, {"name": "ui.faster.client.h", "type": "import", "description": "a function imported for creating virtual DOM elements"}, {"name": "ui.faster.client.globals", "type": "global", "description": "an object containing the global context and an instance of `DOMEffector`"}, {"name": "ui.faster.client.render", "type": "function", "description": "a function that renders a component with data onto a parent element using a template, context, and effector"}, {"name": "ui.faster.client.h", "type": "import", "description": "a function imported for creating virtual DOM elements"}, {"name": "ui.faster.client.template", "type": "import", "description": "a function imported for creating a template for a component"}, {"name": "ui.faster.client.Cell", "type": "import", "description": "a class imported for creating cell objects"}]}, {"name": "ui.faster.effectors", "lang": "js", "children": [{"name": "ui.faster.effectors.DOMEffector", "type": "class", "description": "A class that provides methods to manipulate the DOM (Document Object Model) efficiently."}]}, {"name": "ui.faster.effects", "lang": "js", "children": [{"name": "ui.faster.effects.Effect", "type": "class", "description": "Represents an effect on the UI, extending the `Cell` class."}, {"name": "ui.faster.effects.TemplateEffect", "type": "class", "description": "Extends `Effect` and applies a template to render UI elements based on inputs."}, {"name": "ui.faster.effects.ApplicationEffect", "type": "class", "description": "Extends `Effect` and creates a new context for rendering UI elements."}, {"name": "ui.faster.effects.ConditionalEffect", "type": "class", "description": "Extends `Effect` and renders UI elements based on conditions."}, {"name": "ui.faster.effects.MappingEffect", "type": "class", "description": "Extends `Effect` and maps items to render UI elements."}, {"name": "ui.faster.effects.FormattingEffect", "type": "class", "description": "Extends `Effect` and formats text to render on the UI."}]}, {"name": "ui.faster.templates", "lang": "js", "children": [{"name": "ui.faster.templates.Injection", "type": "class", "description": "a subclass of `Cell` representing an injection of data into a context."}, {"name": "ui.faster.templates.Injection.args", "type": "instance variable", "description": "stores the arguments passed to the injection."}, {"name": "ui.faster.templates.Selection", "type": "class", "description": "a subclass of `Cell` representing a selection."}, {"name": "ui.faster.templates.Argument", "type": "class", "description": "a subclass of `Selection` representing an argument with a name."}, {"name": "ui.faster.templates.Argument.name", "type": "instance variable", "description": "stores the name of the argument."}, {"name": "ui.faster.templates.Derivation", "type": "class", "description": "a subclass of `Selection` representing a derivation based on an input and a transform function."}, {"name": "ui.faster.templates.Derivation.input", "type": "instance variable", "description": "stores the input selection for the derivation."}, {"name": "ui.faster.templates.Derivation.transform", "type": "instance variable", "description": "stores the transformation function for the derivation."}]}, {"name": "ui.faster.utils.collections", "lang": "js", "children": [{"name": "ui.faster.utils.collections.assign", "type": "function", "description": "a function that assigns a value to a nested property within an object."}]}, {"name": "ui.faster.utils.inspect", "lang": "js", "children": [{"name": "ui.faster.utils.inspect.getSignature", "type": "function", "description": "Extracts the arguments from a function declaration and returns an object with the function declaration and an array of arguments with their names, access paths, and whether they are part of a rest parameter."}]}, {"name": "ui.faster.utils.logging", "lang": "js", "children": [{"name": "ui.faster.utils.logging.onError", "type": "function", "description": "a function that logs an error message along with origin, message, and additional data to the console."}]}, {"name": "ui.faster.utils.types", "lang": "js", "children": [{"name": "ui.faster.utils.types.RawObjectPrototype", "type": "constant", "description": "Represents the prototype of an empty object."}, {"name": "ui.faster.utils.types.isObject", "type": "function", "description": "A function that determines if a given value is an object by comparing its prototype to `RawObjectPrototype`."}]}, {"name": "ui.faster.vdom", "lang": "js", "children": [{"name": "ui.faster.vdom.Effect", "type": "class", "description": "Represents an effect applied to a virtual DOM node."}, {"name": "ui.faster.vdom.FormattingEffect", "type": "class", "description": "Represents a formatting effect applied to a virtual DOM node."}, {"name": "ui.faster.vdom.Cell", "type": "class", "description": "Represents a cell used in the virtual DOM."}, {"name": "ui.faster.vdom.isObject", "type": "function", "description": "A utility function to check if a value is an object."}, {"name": "ui.faster.vdom.onError", "type": "function", "description": "A utility function for logging errors."}, {"name": "ui.faster.vdom.VNode", "type": "class", "description": "Represents a virtual DOM node."}, {"name": "ui.faster.vdom.VDOMFactoryProxy", "type": "class", "description": "Represents a proxy for creating virtual DOM nodes."}]}, {"name": "ui.formats", "lang": "js", "children": [{"name": "ui.formats.bool", "type": "function", "description": "Returns a string representation of a boolean value."}, {"name": "ui.formats.text", "type": "function", "description": "Converts any value to a string."}, {"name": "ui.formats.count", "type": "function", "description": "Returns the length of an array or object as a string."}, {"name": "ui.formats.index", "type": "function", "description": "Returns the index incremented by 1 if it's a number."}, {"name": "ui.formats.attr", "type": "function", "description": "Returns the string representation of a value if it's truthy."}, {"name": "ui.formats.not", "type": "function", "description": "Returns the negation of a boolean value."}, {"name": "ui.formats.empty", "type": "function", "description": "Checks if a value is empty and returns a boolean."}, {"name": "ui.formats.asDate", "type": "function", "description": "Converts a number or Date object to a Date."}, {"name": "ui.formats.date", "type": "function", "description": "Formats a date value as \"YYYY-MM-DD\"."}, {"name": "ui.formats.datetime", "type": "function", "description": "Formats a datetime value as \"YYYY-MM-DD HH:MM:SS\"."}, {"name": "ui.formats.time", "type": "function", "description": "Formats a time value as \"HH:MM:SS\"."}, {"name": "ui.formats.duration", "type": "function", "description": "Converts seconds to a human-readable duration string."}, {"name": "ui.formats.swallow", "type": "function", "description": "Returns an empty string."}, {"name": "ui.formats.ago", "type": "function", "description": "Converts a date or timestamp to a human-readable time ago string."}, {"name": "ui.formats.format", "type": "function", "description": "Applies a custom format function to a value."}, {"name": "ui.formats.timetuple", "type": "function", "description": "Converts an array or Date to a Date object."}, {"name": "ui.formats.html", "type": "function", "description": "Parses and returns an HTML string as a DocumentFragment."}, {"name": "ui.formats.debug", "type": "function", "description": "Logs a debug message and returns the value."}, {"name": "ui.formats.registerFormat", "type": "function", "description": "Registers a custom format function for later use."}, {"name": "ui.formats.Formats", "type": "object", "description": "Contains all the format functions as properties."}]}, {"name": "ui.hooks", "lang": "js", "children": [{"name": "ui.hooks.StateSlot", "type": "class", "description": "Represents a slot in the state with methods to get, set, and attach event handlers."}, {"name": "ui.hooks.useState", "type": "function", "description": "A hook function that returns a new StateSlot instance bound to the provided state and path."}, {"name": "ui.hooks.useLocalState", "type": "function", "description": "A hook function that returns a new StateSlot instance for local state management, extending the path based on the provided input."}]}, {"name": "ui.icons", "lang": "js", "children": [{"name": "ui.icons.Icons", "type": "global", "description": "an SVG element representing icons with specified attributes like width, height, and viewBox."}, {"name": "ui.icons.Sources", "type": "global", "description": "an object containing different sources for icons with their respective URLs, sizes, and styles."}, {"name": "ui.icons.sourceName", "type": "function", "description": "a function that determines the name of the icon source based on the provided source parameter."}, {"name": "ui.icons.loadIcon", "type": "function", "description": "a function that loads an icon by fetching its content from a specified URL and appending it to the container."}, {"name": "ui.icons.icon", "type": "function", "description": "a function that creates and returns an SVG element representing an icon with specified name, size, source, style, and container."}]}, {"name": "ui.interaction", "lang": "js", "children": [{"name": "ui.interaction.bind", "type": "function", "description": "Attaches event listeners to a DOM node based on the provided handlers."}, {"name": "ui.interaction.unbind", "type": "function", "description": "Removes event listeners from a DOM node based on the provided handlers."}, {"name": "ui.interaction.drag", "type": "function", "description": "Initiates a drag operation on a DOM node and triggers move and end callbacks."}, {"name": "ui.interaction.autoresize", "type": "function", "description": "Automatically adjusts the height of a textarea element based on its content."}, {"name": "ui.interaction.Keyboard", "type": "class", "description": "Represents a keyboard input handler with static properties and methods."}]}, {"name": "ui", "lang": "js", "children": [{"name": "ui.ui", "type": "global", "description": "the main function used to instantiate a set of components in a context."}, {"name": "ui.createComponent", "type": "function", "description": "a function to create a component."}, {"name": "ui.controller", "type": "function", "description": "a function used as a controller."}, {"name": "ui.Loader", "type": "class", "description": "a class used for loading resources."}, {"name": "ui.loadTemplates", "type": "function", "description": "a function to load templates."}, {"name": "ui.createModule", "type": "function", "description": "a function to create a module."}, {"name": "ui.stylesheet", "type": "function", "description": "a function related to stylesheets."}, {"name": "ui.onWarning", "type": "function", "description": "a function to handle warnings."}, {"name": "ui.API", "type": "class", "description": "a class representing an API."}, {"name": "ui.Options", "type": "class", "description": "a class representing options."}, {"name": "ui.tokens", "type": "module", "description": "a module related to tokens."}]}, {"name": "ui.loading", "lang": "js", "children": [{"name": "ui.loading.AssetLoader", "type": "class", "description": "A class that keeps track of loaded resources and allows for synchronization."}, {"name": "ui.loading.Loader", "type": "global", "description": "an instance of `AssetLoader` used for loading assets."}]}, {"name": "ui.math", "lang": "js", "children": [{"name": "ui.math.clamp", "type": "function", "description": "Clamps a value `v` between a minimum value `a` and a maximum value `b`."}, {"name": "ui.math.lerp", "type": "function", "description": "Performs linear interpolation between two values `a` and `b` based on a factor `k`."}, {"name": "ui.math.prel", "type": "function", "description": "Calculates the proportional value of `v` between `a` and `b`."}, {"name": "ui.math.point", "type": "function", "description": "Creates a 4-dimensional point with coordinates `x` and `y`."}, {"name": "ui.math.rect", "type": "function", "description": "Creates a 4-dimensional rectangle with position `x`, `y` and dimensions `w`, `h`."}, {"name": "ui.math.vmul", "type": "function", "description": "Performs element-wise multiplication of two 4-dimensional vectors."}, {"name": "ui.math.vdiv", "type": "function", "description": "Performs element-wise division of two 4-dimensional vectors."}, {"name": "ui.math.vadd", "type": "function", "description": "Performs element-wise addition of two 4-dimensional vectors."}, {"name": "ui.math.vsub", "type": "function", "description": "Performs element-wise subtraction of two 4-dimensional vectors."}]}, {"name": "ui.path", "lang": "js", "children": [{"name": "ui.path.nodePath", "type": "function", "description": "Returns the path of the given `node` up until the given `root`, as an array of indices from `children`."}, {"name": "ui.path.pathNode", "type": "function", "description": "Returns the node at the given `path` for the given `root` node."}, {"name": "ui.path.pathData", "type": "function", "description": "Returns the value at the given `path` for the given `data`."}, {"name": "ui.path.composePaths", "type": "function", "description": "Takes two paths and composes them together. If a path starts with `[\"\",...]` then it is relative, otherwise it is absolute."}, {"name": "ui.path.parsePath", "type": "function", "description": "Parses the given `path` (as a string) and returns a path array."}, {"name": "ui.path.commonPath", "type": "function", "description": "Finds the common path among multiple paths."}]}, {"name": "ui.position", "lang": "js", "children": [{"name": "ui.position.Types", "type": "global", "description": "an Enum containing values for different types like Window, Document, Node, Array"}, {"name": "ui.position.typeOf", "type": "global", "description": "a function to determine the type of a given value"}, {"name": "ui.position.position", "type": "global", "description": "a function to get the position of a given value (like window, array, event, or node)"}, {"name": "ui.position.dimension", "type": "global", "description": "a function to get the dimensions of a given value"}, {"name": "ui.position.area", "type": "global", "description": "a function to get the area (position and dimensions) of a given value"}, {"name": "ui.position.place", "type": "global", "description": "a function to place a node at a specific area"}, {"name": "ui.position.reldimension", "type": "global", "description": "a function to calculate relative dimensions between two values"}, {"name": "ui.position.relposition", "type": "global", "description": "a function to calculate relative position between two values"}]}, {"name": "ui.reactive", "lang": "js", "children": [{"name": "ui.reactive.cmp", "type": "imported function", "description": "used for comparing two values."}, {"name": "ui.reactive.asTrue", "type": "imported function", "description": "a utility function that always returns true."}, {"name": "ui.reactive.RuntimeError", "type": "imported class", "description": "a custom error class for runtime errors."}, {"name": "ui.reactive.NotImplementedError", "type": "imported class", "description": "a custom error class for not implemented errors."}, {"name": "ui.reactive.Reactor", "type": "imported class", "description": "represents a reactive object that reacts to changes in input cells."}, {"name": "ui.reactive.Selector", "type": "imported class", "description": "represents a selector object that selects values from input cells based on a pattern."}, {"name": "ui.reactive.SelectorType", "type": "imported constant", "description": "defines the type of a selector as Atom, List, or Map."}, {"name": "ui.reactive.map", "type": "imported function", "description": "used for mapping values in collections."}, {"name": "ui.reactive.last", "type": "imported function", "description": "returns the last element of an array."}, {"name": "ui.reactive.access", "type": "imported function", "description": "accesses a value in a nested object using a path."}, {"name": "ui.reactive.patch", "type": "imported function", "description": "patches a value in a nested object."}, {"name": "ui.reactive.onError", "type": "imported function", "description": "logs an error message."}, {"name": "ui.reactive.API", "type": "imported class", "description": "represents an API object."}, {"name": "ui.reactive.Subscription", "type": "class", "description": "wraps a subscription with a handler, path, and origin."}, {"name": "ui.reactive.Subscribable", "type": "class", "description": "a hierarchical set of subscriptions that can wrap a value and allow for subscription of subsets of its values."}, {"name": "ui.reactive.Cell", "type": "class", "description": "extends Subscribable and represents a cell with a name."}, {"name": "ui.reactive.Value", "type": "class", "description": "extends Cell and represents a value cell with a comparator, revision, and pending value."}, {"name": "ui.reactive.Signal", "type": "class", "description": "extends Value and represents a source of events."}, {"name": "ui.reactive.Selected", "type": "class", "description": "extends Cell and represents a selected cell with a selector, inputs, comparator, subscriptions, and value."}, {"name": "ui.reactive.Scope", "type": "class", "description": "extends Cell and represents a scope with slots, parent, ancestors, define method, and evaluation methods."}]}, {"name": "ui.selector", "lang": "js", "children": [{"name": "ui.selector.onError", "type": "function", "description": "a function imported from \"./utils/logging.js\" used for error handling"}, {"name": "ui.selector.commonPath", "type": "function", "description": "a function imported from \"./path.js\" used to find the common path among multiple paths"}, {"name": "ui.selector.SelectorScope", "type": "constant", "description": "an object defining the scope options for a selector input"}, {"name": "ui.selector.SelectorType", "type": "constant", "description": "an object defining the type options for a selector input"}, {"name": "ui.selector.SelectorInput", "type": "class", "description": "a class representing a single selection input in a selector"}, {"name": "ui.selector.Selector", "type": "class", "description": "a class representing a selection in the data"}, {"name": "ui.selector.Reactor", "type": "class", "description": "a class representing an effect/reaction to an event"}, {"name": "ui.selector.Fused", "type": "class", "description": "a class representing a fused element"}, {"name": "ui.selector.onError", "type": "function", "description": "a function imported from \"./utils/logging.js\" used for error handling"}, {"name": "ui.selector.commonPath", "type": "function", "description": "a function imported from \"./path.js\" used to find the common path among multiple paths"}]}, {"name": "ui.ssr.cssgen", "lang": "js", "children": [{"name": "ui.ssr.cssgen.RE_TMPL_START", "type": "global", "description": "a regular expression to match the start of a template"}, {"name": "ui.ssr.cssgen.RE_TMPL_MID", "type": "global", "description": "a regular expression to match the middle of a template"}, {"name": "ui.ssr.cssgen.RE_TMPL_END", "type": "global", "description": "a regular expression to match the end of a template"}, {"name": "ui.ssr.cssgen.match", "type": "function", "description": "a function to find a match in a text based on a regular expression"}, {"name": "ui.ssr.cssgen.findRegions", "type": "function", "description": "a generator function to find template regions in a text"}, {"name": "ui.ssr.cssgen.process", "type": "function", "description": "a generator function to process text content based on template regions"}, {"name": "ui.ssr.cssgen.rewrite", "type": "function", "description": "an asynchronous function to rewrite a CSS file by processing template regions"}, {"name": "ui.ssr.cssgen.input", "type": "variable", "description": "represents the input file object"}, {"name": "ui.ssr.cssgen.text", "type": "variable", "description": "the text content of the input file"}, {"name": "ui.ssr.cssgen.output", "type": "variable", "description": "represents the output file object"}, {"name": "ui.ssr.cssgen.out", "type": "variable", "description": "the writer for the output file"}]}, {"name": "ui.templates.directives", "lang": "js", "children": [{"name": "ui.templates.directives.PATH", "type": "constant", "description": "represents a selection in the data path in a specific format."}, {"name": "ui.templates.directives.CODE", "type": "constant", "description": "represents a code block enclosed in curly braces."}, {"name": "ui.templates.directives.EXPR", "type": "constant", "description": "represents an expression enclosed in parentheses."}, {"name": "ui.templates.directives.FORMAT", "type": "constant", "description": "represents a format specifier prefixed with a pipe symbol."}, {"name": "ui.templates.directives.TARGET", "type": "constant", "description": "represents a target identifier followed by an equal sign."}, {"name": "ui.templates.directives.SELECTION", "type": "constant", "description": "represents a selection pattern in a specific format."}, {"name": "ui.templates.directives.INPUT", "type": "constant", "description": "represents an input pattern in a specific format."}, {"name": "ui.templates.directives.PROCESSOR", "type": "constant", "description": "represents a processor pattern in a specific format."}, {"name": "ui.templates.directives.SELECTOR", "type": "constant", "description": "represents a selector pattern in a specific format."}, {"name": "ui.templates.directives.RE_SELECTOR", "type": "constant", "description": "a regular expression for matching selectors."}, {"name": "ui.templates.directives.matchSelector", "type": "function", "description": "a function to check if a text matches the selector pattern."}, {"name": "ui.templates.directives.normInput", "type": "function", "description": "normalizes input values."}, {"name": "ui.templates.directives.createFunction", "type": "function", "description": "creates a new function and handles errors if it fails."}, {"name": "ui.templates.directives.parseSelector", "type": "function", "description": "parses a selector string into a structured selector object."}, {"name": "ui.templates.directives.RE_NUMBER", "type": "constant", "description": "a regular expression for matching numbers."}, {"name": "ui.templates.directives.matchLiteralValue", "type": "function", "description": "matches a literal value."}, {"name": "ui.templates.directives.matchLiteralSelector", "type": "function", "description": "checks if a text is a literal selector."}, {"name": "ui.templates.directives.parseLiteralSelector", "type": "function", "description": "parses a literal selector into a structured selector object."}, {"name": "ui.templates.directives.parseLiteralValue", "type": "function", "description": "parses a literal value into a JavaScript value."}, {"name": "ui.templates.directives.parseLiteral", "type": "function", "description": "parses a literal string into a JavaScript value or selector."}, {"name": "ui.templates.directives.parseExpression", "type": "function", "description": "parses an expression string."}, {"name": "ui.templates.directives.SLOT", "type": "constant", "description": "represents a slot pattern."}, {"name": "ui.templates.directives.RE_ON", "type": "constant", "description": "a regular expression for matching 'on' directives."}, {"name": "ui.templates.directives.parseOnDirective", "type": "function", "description": "parses an 'on' directive string into a structured object."}, {"name": "ui.templates.directives.parseForDirective", "type": "function", "description": "parses a 'for' directive string into a selector object."}, {"name": "ui.templates.directives.parseOutDirective", "type": "function", "description": "parses an 'out' directive string into a structured object."}, {"name": "ui.templates.directives.extractLiteralBindings", "type": "function", "description": "extracts literal bindings from a node."}, {"name": "ui.templates.directives.extractBindings", "type": "function", "description": "extracts bindings from attributes of a node."}, {"name": "ui.templates.directives.extractSlots", "type": "function", "description": "extracts slot elements from a node."}, {"name": "ui.templates.directives.createHandlerBody", "type": "function", "description": "creates the body of a handler function."}, {"name": "ui.templates.directives.createProcessorBody", "type": "function", "description": "creates the body of a processor function."}, {"name": "ui.templates.directives.createProcessorExpression", "type": "function", "description": "creates a processor expression."}]}, {"name": "ui.templates.for", "lang": "js", "children": [{"name": "ui.templates.for.onForAttribute", "type": "function", "description": "a function that processes the `for` attribute in a template element, creating a SlotEffector to handle the directive"}, {"name": "ui.templates.for.node", "type": "variable", "description": "the template element containing the `for` attribute"}, {"name": "ui.templates.for.text", "type": "variable", "description": "the name of the `for` attribute"}, {"name": "ui.templates.for.selector", "type": "variable", "description": "the parsed directive from the `for` attribute"}, {"name": "ui.templates.for.handlers", "type": "variable", "description": "event handlers found in the template element"}, {"name": "ui.templates.for.content", "type": "variable", "description": "the content of the template element as a document fragment"}, {"name": "ui.templates.for.anchor", "type": "variable", "description": "an anchor element created for the `for` directive"}, {"name": "ui.templates.for.DOM", "type": "import", "description": "utility functions related to the DOM manipulation"}, {"name": "ui.templates.for.contentAsFragment", "type": "import", "description": "function to convert a DOM element's content into a document fragment"}, {"name": "ui.templates.for.createAnchor", "type": "import", "description": "function to create an anchor element"}, {"name": "ui.templates.for.SlotEffector", "type": "import", "description": "a class representing an effector for handling slot elements"}, {"name": "ui.templates.for.findEventHandlers", "type": "import", "description": "function to find event handlers within a template element"}]}, {"name": "ui.templates.if", "lang": "js", "children": [{"name": "ui.templates.if.onIfAttribute", "type": "function", "description": "a function that processes an 'if' attribute, creates a new IfEffector based on the attribute value, and returns it."}]}, {"name": "ui.templates.inout", "lang": "js", "children": [{"name": "ui.templates.inout.onOutAttribute", "type": "function", "description": "Processes an `out:NAME=SELECTOR` attribute, handling special cases for content, style, value, or regular attribute effector."}, {"name": "ui.templates.inout.parseOutDirective", "type": "function", "description": "Parses the selector from the `out:NAME=SELECTOR` attribute."}]}, {"name": "ui.templates", "lang": "js", "children": [{"name": "ui.templates.Templates", "type": "global", "description": "a Map object to store templates"}, {"name": "ui.templates.TemplateProcessor", "type": "class", "description": "a class to process templates"}, {"name": "ui.templates.Options", "type": "imported", "description": "a module for handling options"}, {"name": "ui.templates.onError", "type": "imported", "description": "a function for error handling"}, {"name": "ui.templates.onSlotNode", "type": "imported", "description": "a function for handling slot nodes in templates"}, {"name": "ui.templates.onTemplateNode", "type": "imported", "description": "a function for handling template nodes in templates"}, {"name": "ui.templates.onOutAttribute", "type": "imported", "description": "a function for handling out attributes in templates"}, {"name": "ui.templates.onForAttribute", "type": "imported", "description": "a function for handling for attributes in templates"}, {"name": "ui.templates.onOnAttribute", "type": "imported", "description": "a function for handling on attributes in templates"}, {"name": "ui.templates.onIfAttribute", "type": "imported", "description": "a function for handling if attributes in templates"}, {"name": "ui.templates.onMatchAttribute", "type": "imported", "description": "a function for handling match attributes in templates"}]}, {"name": "ui.templates.match", "lang": "js", "children": [{"name": "ui.templates.match.onMatchAttribute", "type": "function", "description": "a function that processes a match attribute and returns a MatchEffector."}, {"name": "ui.templates.match.parseSelector", "type": "function", "description": "a function that parses a selector from a given attribute value."}, {"name": "ui.templates.match.parseLiteralValue", "type": "function", "description": "a function that parses a literal value from a given attribute value."}, {"name": "ui.templates.match.parseExpression", "type": "function", "description": "a function that parses an expression from a given attribute value."}, {"name": "ui.templates.match.nodePath", "type": "function", "description": "a function that determines the path of a node relative to the root node."}, {"name": "ui.templates.match.asFragment", "type": "function", "description": "a function that converts a node to a document fragment."}, {"name": "ui.templates.match.replaceNodeWithPlaceholder", "type": "function", "description": "a function that replaces a node with a placeholder."}, {"name": "ui.templates.match.makeKey", "type": "function", "description": "a function that generates a unique key."}, {"name": "ui.templates.match.MatchEffector", "type": "class", "description": "a class representing an effector for matching."}]}, {"name": "ui.templates.on", "lang": "js", "children": [{"name": "ui.templates.on.onOnAttribute", "type": "function", "description": "Processes the `on` attribute for a given node, creating an EventEffector if applicable."}, {"name": "ui.templates.on.findEventHandlers", "type": "function", "description": "Finds event handlers in the attributes of a node."}]}, {"name": "ui.templates.slot", "lang": "js", "children": [{"name": "ui.templates.slot.onSlotNode", "type": "function", "description": "Processes a `<slot template=... select=.... >` node, extracting the template, selector, bindings, and attributes to handle slot rendering."}]}, {"name": "ui.templates.template", "lang": "js", "children": [{"name": "ui.templates.template.Template", "type": "class", "description": "Represents a template with a name, root element, views, and bindings. It also has a method to check if it has effectors."}, {"name": "ui.templates.template.onTemplateNode", "type": "function", "description": "Parses a given node and its descendants as a template definition. It handles loading templates, processing nodes, and extracting bindings."}]}, {"name": "ui.templates.view", "lang": "js", "children": [{"name": "ui.templates.view.View", "type": "class", "description": "Represents a view with a root node, references, and effectors."}, {"name": "ui.templates.view.createView", "type": "function", "description": "Creates a view from a root node, looking for specific attribute types and creating corresponding effectors."}]}, {"name": "ui.templates.walking", "lang": "js", "children": [{"name": "ui.templates.walking.isBoundaryNode", "type": "function", "description": "Determines if a given node is a boundary node in a tree structure."}, {"name": "ui.templates.walking.TreeWalkerFilter", "type": "object", "description": "Defines a filter for tree walking to reject certain nodes."}, {"name": "ui.templates.walking.iterAttributesLike", "type": "generator function", "description": "Iterates through the attributes of a node that match a given regular expression."}, {"name": "ui.templates.walking.iterAttributes", "type": "generator function", "description": "Iterates through the attributes of a node that match a regular expression, using `iterAttributesLike`."}, {"name": "ui.templates.walking.iterNodes", "type": "generator function", "description": "Iterates through nodes that match a list of node names, including descendants of a given node."}, {"name": "ui.templates.walking.iterSelector", "type": "generator function", "description": "Iterates through descendants of a node that match a given CSS selector."}]}, {"name": "ui.testing", "lang": "js", "children": [{"name": "ui.testing.Assertion", "type": "class", "description": "Represents an assertion with methods to perform checks and handle success/failure."}, {"name": "ui.testing.Test", "type": "class", "description": "Represents a test with methods to add assertions and handle events."}, {"name": "ui.testing.Tests", "type": "global", "description": "An array to store instances of Test."}, {"name": "ui.testing.eq", "type": "imported function", "description": "Function imported from `delta.js` to compare two values."}]}, {"name": "ui.tokens", "lang": "js", "children": [{"name": "ui.tokens.RE_TOKEN_DIRECTIVE", "type": "global", "description": "a regular expression used to match token directives with optional assignments and tokens."}, {"name": "ui.tokens.RE_TOKEN", "type": "global", "description": "a regular expression used to match tokens with numbers, units, and names."}, {"name": "ui.tokens.TokensContext", "type": "class", "description": "a class representing a context for tokens with methods to evaluate and manipulate token values."}, {"name": "ui.tokens.Tokens", "type": "class", "description": "a class representing a collection of tokens with methods to parse and expand tokens."}]}, {"name": "ui.url", "lang": "js", "children": [{"name": "ui.url.URLFormatter", "type": "class", "description": "A class that provides methods to parse and apply formatting to URL parameters."}, {"name": "ui.url.URLHash", "type": "class", "description": "A class that manages the state of the URL hash, providing methods to interact with it."}]}, {"name": "ui.utils.async", "lang": "js", "children": [{"name": "ui.utils.async.Future", "type": "class", "description": "Represents a future value that can be subscribed to for updates."}, {"name": "ui.utils.async.Stream", "type": "class", "description": "Extends `Future` class and represents a stream of values with a revision and current value."}, {"name": "ui.utils.async.Repeat", "type": "class", "description": "Extends `Stream` class and represents a stream of repeated values based on a functor, period, and condition."}, {"name": "ui.utils.async.repeat", "type": "function", "description": "A helper function to create a new `Repeat` instance with a specified period and callback function."}]}, {"name": "ui.utils.collections", "lang": "js", "children": [{"name": "ui.utils.collections.asMappable", "type": "function", "description": "a function that maps a function over an array"}, {"name": "ui.utils.collections.list", "type": "function", "description": "a function that converts a non-array value into an array"}, {"name": "ui.utils.collections.reduce", "type": "function", "description": "a function that reduces a collection"}, {"name": "ui.utils.collections.occurrences", "type": "function", "description": "a function that counts the occurrences of values in a collection"}, {"name": "ui.utils.collections.unique", "type": "function", "description": "a function that returns unique values in a collection"}, {"name": "ui.utils.collections.flatten", "type": "function", "description": "a function that flattens a nested array"}, {"name": "ui.utils.collections.grouped", "type": "function", "description": "a function that groups items in a collection"}, {"name": "ui.utils.collections.set", "type": "function", "description": "a function that sets a value in a collection"}, {"name": "ui.utils.collections.array", "type": "function", "description": "a function that creates an array of a specific size"}, {"name": "ui.utils.collections.reverse", "type": "function", "description": "a function that reverses a collection"}, {"name": "ui.utils.collections.cmp", "type": "function", "description": "a function that compares two values"}, {"name": "ui.utils.collections.sorted", "type": "function", "description": "a function that sorts a collection"}, {"name": "ui.utils.collections.map", "type": "function", "description": "a function that maps a function over a collection"}, {"name": "ui.utils.collections.entries", "type": "function", "description": "a function that converts a collection into an array of key-value pairs"}, {"name": "ui.utils.collections.filter", "type": "function", "description": "a function that filters a collection"}, {"name": "ui.utils.collections.each", "type": "function", "description": "a function that iterates over a collection"}, {"name": "ui.utils.collections.values", "type": "generator function", "description": "a generator function that yields values in a collection"}, {"name": "ui.utils.collections.keys", "type": "generator function", "description": "a generator function that yields keys in a collection"}, {"name": "ui.utils.collections.items", "type": "generator function", "description": "a generator function that yields items in a collection"}, {"name": "ui.utils.collections.range", "type": "function", "description": "a function that creates a range of values"}, {"name": "ui.utils.collections.copy", "type": "function", "description": "a function that creates a copy of a value"}, {"name": "ui.utils.collections.append", "type": "function", "description": "a function that appends an item to a collection"}, {"name": "ui.utils.collections.removeAt", "type": "function", "description": "a function that removes an item at a specific index from a collection"}, {"name": "ui.utils.collections.access", "type": "function", "description": "a function that accesses a nested value in a collection"}, {"name": "ui.utils.collections.len", "type": "function", "description": "a function that calculates the length of a collection"}, {"name": "ui.utils.collections.patch", "type": "function", "description": "a function that patches a value in a nested structure"}, {"name": "ui.utils.collections.assign", "type": "function", "description": "a function that assigns a value in a nested structure"}, {"name": "ui.utils.collections.last", "type": "function", "description": "a function that returns the last item in a stream"}, {"name": "ui.utils.collections.toggle", "type": "function", "description": "a function that toggles a value in a collection"}, {"name": "ui.utils.collections.trigger", "type": "function", "description": "a function that triggers a set of handlers"}]}, {"name": "ui.utils.data", "lang": "js", "children": [{"name": "ui.utils.data.map", "type": "imported function", "description": "a function for mapping values in collections"}, {"name": "ui.utils.data.each", "type": "imported function", "description": "a function for iterating over elements in a collection"}, {"name": "ui.utils.data.reduce", "type": "imported function", "description": "a function for reducing a collection to a single value"}, {"name": "ui.utils.data.assign", "type": "imported function", "description": "a function for copying the values of all enumerable own properties from one or more source objects to a target object"}, {"name": "ui.utils.data.values", "type": "imported function", "description": "a function for retrieving the values of an object"}, {"name": "ui.utils.data.keys", "type": "imported function", "description": "a function for retrieving the keys of an object"}, {"name": "ui.utils.data.Skip", "type": "imported constant", "description": "a constant used for skipping values during processing"}, {"name": "ui.utils.data.isObject", "type": "imported function", "description": "a function for checking if a value is an object"}, {"name": "ui.utils.data.Enum", "type": "imported function", "description": "a function for creating an enumeration"}, {"name": "ui.utils.data.capitalize", "type": "imported function", "description": "a function for capitalizing a string"}, {"name": "ui.utils.data.Type", "type": "class", "description": "a class representing a data type with methods to determine the type of a value"}, {"name": "ui.utils.data.Types", "type": "constant", "description": "an enumeration of data types"}, {"name": "ui.utils.data.Sampler", "type": "class", "description": "a class for sampling and categorizing data values"}, {"name": "ui.utils.data.inspect", "type": "function", "description": "a generator function for inspecting data values and their types"}, {"name": "ui.utils.data.schema", "type": "function", "description": "a function for generating a schema based on data values"}, {"name": "ui.utils.data.types", "type": "function", "description": "a function for categorizing data values into different types"}, {"name": "ui.utils.data.categories", "type": "function", "description": "a function for categorizing data values"}, {"name": "ui.utils.data.describe", "type": "function", "description": "a function for describing statistical properties of data values"}, {"name": "ui.utils.data.tabled", "type": "function", "description": "a generator function for generating a table from data values"}, {"name": "ui.utils.data.table", "type": "function", "description": "a function for converting data into a table format"}, {"name": "ui.utils.data.queried", "type": "function", "description": "a generator function for querying data based on a path"}, {"name": "ui.utils.data.query", "type": "function", "description": "a function for querying data"}]}, {"name": "ui.utils.delta", "lang": "js", "children": [{"name": "ui.utils.delta.diffstate", "type": "function", "description": "Compares two values and generates a state difference using specified callbacks."}, {"name": "ui.utils.delta.cmp", "type": "function", "description": "Compares two values and returns -1, 0, or 1 based on their relationship."}, {"name": "ui.utils.delta.eq", "type": "function", "description": "Checks if two values are equal based on their types and content."}]}, {"name": "ui.utils.dom", "lang": "js", "children": [{"name": "ui.utils.dom.createComment", "type": "function", "description": "creates a comment or text node based on the provided text."}, {"name": "ui.utils.dom.asFragment", "type": "function", "description": "creates a document fragment from the provided nodes."}, {"name": "ui.utils.dom.contentAsFragment", "type": "function", "description": "flushes the content of a node into a new fragment."}, {"name": "ui.utils.dom.createAnchor", "type": "function", "description": "creates an anchor node with a given name for a specified node."}, {"name": "ui.utils.dom.replaceNodeWithPlaceholder", "type": "function", "description": "replaces a node with a placeholder node."}, {"name": "ui.utils.dom.isNodeEmpty", "type": "function", "description": "checks if a node is empty, considering whitespace."}, {"name": "ui.utils.dom.NS", "type": "constant", "description": "an object with predefined namespace strings for SVG."}, {"name": "ui.utils.dom.DOMProxy", "type": "class", "description": "a class for creating proxied DOM elements with optional namespace."}, {"name": "ui.utils.dom.DOM", "type": "class", "description": "a collection of utilities for working with the DOM."}, {"name": "ui.utils.dom.WebEvents", "type": "constant", "description": "an array of standard web events."}]}, {"name": "ui.utils.errors", "lang": "js", "children": [{"name": "ui.utils.errors.NotImplementedError", "type": "function", "description": "a function that returns a new Error object with the message \"NotImplementedError\"."}, {"name": "ui.utils.errors.ValueError", "type": "function", "description": "a function that returns a new Error object with the message \"ValueError\" and a given value."}, {"name": "ui.utils.errors.RuntimeError", "type": "function", "description": "a function that returns a new Error object with the message \"RuntimeError\" and a given value."}]}, {"name": "ui.utils.func", "lang": "js", "children": [{"name": "ui.utils.func.def", "type": "function", "description": "a function that returns the first non-undefined argument from a list of arguments."}, {"name": "ui.utils.func.asTrue", "type": "function", "description": "a function that always returns true."}, {"name": "ui.utils.func.extractor", "type": "function", "description": "a function that returns a value from an object based on a key, or the entire object if the key is a function."}, {"name": "ui.utils.func.pipe", "type": "function", "description": "a function that chains a value through a series of functions."}, {"name": "ui.utils.func.idem", "type": "function", "description": "a function that returns its input value unchanged."}, {"name": "ui.utils.func.Memoized", "type": "global", "description": "a Map object used for memoization."}, {"name": "ui.utils.func.memo", "type": "function", "description": "a function that memoizes the result of a functor based on guards."}]}, {"name": "ui.utils.http", "lang": "js", "children": [{"name": "ui.utils.http.getJSON", "type": "function", "description": "a function that performs an HTTP GET request and returns the parsed JSON response."}, {"name": "ui.utils.http.getText", "type": "function", "description": "a function that performs an HTTP GET request and returns the raw text response."}]}, {"name": "ui.utils.ids", "lang": "js", "children": [{"name": "ui.utils.ids.Keys", "type": "global", "description": "a Map object used to store sequential keys for different scopes."}, {"name": "ui.utils.ids.makeKey", "type": "function", "description": "a function that returns sequential keys for a given scope to ensure reproducibility."}, {"name": "ui.utils.ids.makeId", "type": "function", "description": "a function that generates a new Id which is not reproducible."}, {"name": "ui.utils.ids.nextKey", "type": "function", "description": "a function that generates the next key in a sequence, either by pushing `undefined` to an array or by generating a new Id."}, {"name": "ui.utils.ids.hash", "type": "function", "description": "a function that calculates a hash value for a given value, with an optional seed value."}]}, {"name": "ui.utils.logging", "lang": "js", "children": [{"name": "ui.utils.logging.onWarning", "type": "function", "description": "Logs a warning message with the prefix \"[uijs]\"."}, {"name": "ui.utils.logging.onError", "type": "function", "description": "Logs an error message with the prefix \"[uijs]\"."}, {"name": "ui.utils.logging.onInfo", "type": "function", "description": "Logs an info message with the prefix \"[uijs]\"."}, {"name": "ui.utils.logging.onDebug", "type": "function", "description": "Logs a debug message with the prefix \"[uijs]\" if debug mode is enabled."}, {"name": "ui.utils.logging.setTrace", "type": "function", "description": "Logs a message with the prefix \"[uijs]\" and triggers a debugger breakpoint."}]}, {"name": "ui.utils.math", "lang": "js", "children": [{"name": "ui.utils.math.round", "type": "function", "description": "Rounds a number to the nearest multiple of a given factor within a specified bound."}, {"name": "ui.utils.math.prel", "type": "function", "description": "Calculates the linear interpolation factor between two values based on a given input."}, {"name": "ui.utils.math.sign", "type": "function", "description": "Returns the sign of a number (1 for positive, -1 for negative)."}, {"name": "ui.utils.math.lerp", "type": "function", "description": "Performs linear interpolation between two values based on a factor."}, {"name": "ui.utils.math.clamp", "type": "function", "description": "Restricts a value to be within a specified range."}, {"name": "ui.utils.math.minmax", "type": "function", "description": "Returns an array containing the minimum and maximum of two values."}, {"name": "ui.utils.math.within", "type": "function", "description": "Checks if a value is within a specified range."}, {"name": "ui.utils.math.range", "type": "function", "description": "Generates an array of numbers from 0 to a given count."}, {"name": "ui.utils.math.steps", "type": "function", "description": "Generates an array of step values from 0 to 1 based on a count."}]}, {"name": "ui.utils.options", "lang": "js", "children": [{"name": "ui.utils.options.Options", "type": "object", "description": "an object containing various configuration options for the UI module."}, {"name": "ui.utils.options.Options", "type": "object", "description": "an object containing various configuration options for the UI utilities."}]}, {"name": "ui.utils.query", "lang": "js", "children": [{"name": "ui.utils.query.Combinator", "type": "class", "description": "A class representing a combinator with a list of values."}, {"name": "ui.utils.query.Or", "type": "class", "description": "Extends the `Combinator` class representing an OR combinator."}, {"name": "ui.utils.query.And", "type": "class", "description": "Extends the `Combinator` class representing an AND combinator."}, {"name": "ui.utils.query.predicate", "type": "function", "description": "A function that creates a predicate function based on criteria."}, {"name": "ui.utils.query.match", "type": "function", "description": "A function that matches a value against criteria."}, {"name": "ui.utils.query.text", "type": "function", "description": "A function that creates a regular expression based on a text pattern."}, {"name": "ui.utils.query.API", "type": "object", "description": "An object containing `text`, `predicate`, and `match` functions."}]}, {"name": "ui.utils.reparser", "lang": "js", "children": [{"name": "ui.utils.reparser.make", "type": "function", "description": "creates an object with nested properties based on a given path and value"}, {"name": "ui.utils.reparser.parse", "type": "function", "description": "parses text using a regular expression and returns the matching result"}, {"name": "ui.utils.reparser.makematch", "type": "function", "description": "creates an object from a match result with named groups"}, {"name": "ui.utils.reparser.recapture", "type": "function", "description": "replaces group names in a string with a specified name"}, {"name": "ui.utils.reparser.subcapture", "type": "function", "description": "replaces group names in a string with a default group name"}, {"name": "ui.utils.reparser.capture", "type": "function", "description": "generates a capture group with a specified group name"}, {"name": "ui.utils.reparser.text", "type": "function", "description": "escapes special characters in a string for regex usage"}, {"name": "ui.utils.reparser.next", "type": "function", "description": "generates a capture group for the next item in a sequence"}, {"name": "ui.utils.reparser.list", "type": "function", "description": "generates a list of capture groups for a sequence of items"}, {"name": "ui.utils.reparser.opt", "type": "function", "description": "generates an optional group for a given set of expressions"}, {"name": "ui.utils.reparser.seq", "type": "function", "description": "concatenates multiple expressions into a single sequence"}, {"name": "ui.utils.reparser.or", "type": "function", "description": "generates a group for multiple alternative expressions"}, {"name": "ui.utils.reparser.not", "type": "function", "description": "generates a group that does not include specific exclusions"}, {"name": "ui.utils.reparser.STRING_DQ", "type": "string", "description": "regex pattern for matching double-quoted strings"}, {"name": "ui.utils.reparser.STRING_SQ", "type": "string", "description": "regex pattern for matching single-quoted strings"}, {"name": "ui.utils.reparser.STRING_RAW", "type": "string", "description": "regex pattern for matching raw strings without spaces"}, {"name": "ui.utils.reparser.NOT_SPACE", "type": "string", "description": "regex pattern for matching non-space characters"}, {"name": "ui.utils.reparser.NAME", "type": "string", "description": "regex pattern for matching alphanumeric names"}, {"name": "ui.utils.reparser.INDENT", "type": "string", "description": "regex pattern for matching indentation"}, {"name": "ui.utils.reparser.SPACES", "type": "string", "description": "regex pattern for matching spaces"}, {"name": "ui.utils.reparser.STRING", "type": "string", "description": "regex pattern for matching various types of strings"}]}, {"name": "ui.utils.text", "lang": "js", "children": [{"name": "ui.utils.text.strip", "type": "function", "description": "Removes specified prefix and suffix from a text string."}, {"name": "ui.utils.text.numfmt", "type": "function", "description": "Formats a number with the specified precision."}, {"name": "ui.utils.text.capitalize", "type": "function", "description": "Capitalizes the first letter of a text string."}, {"name": "ui.utils.text.numcode", "type": "function", "description": "Converts a number to a custom base using the specified alphabet."}, {"name": "ui.utils.text.sprintf", "type": "function", "description": "Formats a string based on placeholders and arguments."}]}, {"name": "ui.utils.values", "lang": "js", "children": [{"name": "ui.utils.values.Empty", "type": "constant", "description": "a symbol representing an empty value"}, {"name": "ui.utils.values.Nil", "type": "constant", "description": "a symbol representing a nil value"}, {"name": "ui.utils.values.Any", "type": "constant", "description": "a symbol representing any value"}, {"name": "ui.utils.values.Stop", "type": "constant", "description": "a symbol representing a stop signal"}, {"name": "ui.utils.values.Skip", "type": "constant", "description": "a symbol representing a skip signal"}, {"name": "ui.utils.values.Loading", "type": "constant", "description": "a symbol representing a loading state"}, {"name": "ui.utils.values.RawObjectPrototype", "type": "constant", "description": "the prototype of a raw object"}, {"name": "ui.utils.values.symbols", "type": "constant", "description": "an object containing predefined symbols"}, {"name": "ui.utils.values.isEmpty", "type": "function", "description": "a function to check if a value is considered empty"}, {"name": "ui.utils.values.isAtom", "type": "function", "description": "a function to check if a value is an atomic value"}, {"name": "ui.utils.values.bool", "type": "function", "description": "a function to convert a value to a boolean"}, {"name": "ui.utils.values.isObject", "type": "function", "description": "a function to check if a value is an object"}, {"name": "ui.utils.values.isIterable", "type": "function", "description": "a function to check if a value is iterable"}, {"name": "ui.utils.values.type", "type": "function", "description": "a function to determine the type of a value"}, {"name": "ui.utils.values.Enum", "type": "function", "description": "a function to create an enumeration of values"}, {"name": "ui.utils.values.Empty", "type": "constant", "description": "a symbol representing an empty value"}, {"name": "ui.utils.values.Nil", "type": "constant", "description": "a symbol representing a nil value"}, {"name": "ui.utils.values.Any", "type": "constant", "description": "a symbol representing any value"}, {"name": "ui.utils.values.Stop", "type": "constant", "description": "a symbol representing a stop signal"}, {"name": "ui.utils.values.Skip", "type": "constant", "description": "a symbol representing a skip signal"}, {"name": "ui.utils.values.Loading", "type": "constant", "description": "a symbol representing a loading state"}, {"name": "ui.utils.values.RawObjectPrototype", "type": "constant", "description": "the prototype of a raw object"}, {"name": "ui.utils.values.symbols", "type": "constant", "description": "an object containing predefined symbols"}, {"name": "ui.utils.values.isEmpty", "type": "function", "description": "a function to check if a value is considered empty"}, {"name": "ui.utils.values.isAtom", "type": "function", "description": "a function to check if a value is an atomic value"}, {"name": "ui.utils.values.bool", "type": "function", "description": "a function to convert a value to a boolean"}, {"name": "ui.utils.values.isObject", "type": "function", "description": "a function to check if a value is an object"}, {"name": "ui.utils.values.isIterable", "type": "function", "description": "a function to check if a value is iterable"}, {"name": "ui.utils.values.type", "type": "function", "description": "a function to determine the type of a value"}, {"name": "ui.utils.values.Enum", "type": "function", "description": "a function to create an enumeration of values"}]}, {"name": "ui.version", "lang": "js", "children": [{"name": "ui.version.updated", "type": "exported constant", "description": "a string representing the date and time of the last update."}, {"name": "ui.version.updated", "type": "exported constant", "description": "a string representing the date and time of the last update."}]}]